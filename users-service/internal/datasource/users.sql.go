// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: users.sql

package datasource

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (name,phone,password, signed_for) VALUES ($1, $2, $3, $4) RETURNING id, name, phone, password, signed_for, created_at, update_at
`

type CreateUserParams struct {
	Name      string      `json:"name"`
	Phone     string      `json:"phone"`
	Password  string      `json:"password"`
	SignedFor []SignedFor `json:"signed_for"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Name,
		arg.Phone,
		arg.Password,
		arg.SignedFor,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Phone,
		&i.Password,
		&i.SignedFor,
		&i.CreatedAt,
		&i.UpdateAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getUserByPhone = `-- name: GetUserByPhone :one
SELECT id, phone, name, password, signed_for FROM users WHERE phone = $1 LIMIT 1
`

type GetUserByPhoneRow struct {
	ID        pgtype.UUID `json:"id"`
	Phone     string      `json:"phone"`
	Name      string      `json:"name"`
	Password  string      `json:"password"`
	SignedFor []SignedFor `json:"signed_for"`
}

func (q *Queries) GetUserByPhone(ctx context.Context, phone string) (GetUserByPhoneRow, error) {
	row := q.db.QueryRow(ctx, getUserByPhone, phone)
	var i GetUserByPhoneRow
	err := row.Scan(
		&i.ID,
		&i.Phone,
		&i.Name,
		&i.Password,
		&i.SignedFor,
	)
	return i, err
}

const newServiceSignedFor = `-- name: NewServiceSignedFor :one
UPDATE users set signed_for =  (select array_agg(distinct e) from unnest(array_append(users."signed_for", $2::"signed_for")) e) WHERE phone = $1 RETURNING id, name, phone, password, signed_for, created_at, update_at
`

type NewServiceSignedForParams struct {
	Phone   string    `json:"phone"`
	Column2 SignedFor `json:"column_2"`
}

func (q *Queries) NewServiceSignedFor(ctx context.Context, arg NewServiceSignedForParams) (User, error) {
	row := q.db.QueryRow(ctx, newServiceSignedFor, arg.Phone, arg.Column2)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Phone,
		&i.Password,
		&i.SignedFor,
		&i.CreatedAt,
		&i.UpdateAt,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users SET
  name = COALESCE(NULLIF($2::varchar, ''), name),
  phone = COALESCE(NULLIF($3::varchar, ''), phone),
  password = COALESCE(NULLIF($4::varchar, ''), password),
  update_at = CURRENT_TIMESTAMP
WHERE id = $1
`

type UpdateUserParams struct {
	ID      pgtype.UUID `json:"id"`
	Column2 string      `json:"column_2"`
	Column3 string      `json:"column_3"`
	Column4 string      `json:"column_4"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.Exec(ctx, updateUser,
		arg.ID,
		arg.Column2,
		arg.Column3,
		arg.Column4,
	)
	return err
}
