// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0

package datasource

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type SignedFor string

const (
	SignedForAdeeb SignedFor = "adeeb"
)

func (e *SignedFor) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = SignedFor(s)
	case string:
		*e = SignedFor(s)
	default:
		return fmt.Errorf("unsupported scan type for SignedFor: %T", src)
	}
	return nil
}

type NullSignedFor struct {
	SignedFor SignedFor `json:"signed_for"`
	Valid     bool      `json:"valid"` // Valid is true if SignedFor is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullSignedFor) Scan(value interface{}) error {
	if value == nil {
		ns.SignedFor, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.SignedFor.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullSignedFor) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.SignedFor), nil
}

type User struct {
	ID        pgtype.UUID      `json:"id"`
	Name      string           `json:"name"`
	Phone     string           `json:"phone"`
	Password  string           `json:"password"`
	SignedFor SignedFor        `json:"signed_for"`
	CreatedAt pgtype.Timestamp `json:"created_at"`
	UpdateAt  pgtype.Timestamp `json:"update_at"`
}
