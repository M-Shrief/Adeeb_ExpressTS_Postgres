// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: queries.sql

package datasource

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (name,phone,password) VALUES ($1, $2, $3) RETURNING id, name, phone, password, created_at, update_at
`

type CreateUserParams struct {
	Name     string `json:"name"`
	Phone    string `json:"phone"`
	Password string `json:"password"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Name, arg.Phone, arg.Password)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Phone,
		&i.Password,
		&i.CreatedAt,
		&i.UpdateAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, phone, name, password FROM users WHERE phone = $1 LIMIT 1
`

type GetUserRow struct {
	ID       pgtype.UUID `json:"id"`
	Phone    string      `json:"phone"`
	Name     string      `json:"name"`
	Password string      `json:"password"`
}

func (q *Queries) GetUser(ctx context.Context, phone string) (GetUserRow, error) {
	row := q.db.QueryRow(ctx, getUser, phone)
	var i GetUserRow
	err := row.Scan(
		&i.ID,
		&i.Phone,
		&i.Name,
		&i.Password,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users set name = $2 WHERE id = $1 RETURNING id, name, phone, password, created_at, update_at
`

type UpdateUserParams struct {
	ID   pgtype.UUID `json:"id"`
	Name string      `json:"name"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser, arg.ID, arg.Name)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Phone,
		&i.Password,
		&i.CreatedAt,
		&i.UpdateAt,
	)
	return i, err
}
